deletions (note these deletions are more like cuts):
dw - delete to end of current word, including trailing space
daw - deletes the whole word (note that dae does not work)
de - delete to the end of the current word, excluding trailing space 
d$ - delete to the end of the line
d^ - delete to the beginning of the line
dd - delete entire line
d2w - delete from cursor to end of word and entire next word (number repeats the preceeding action)
di' - delete from current ' to next, without deleting ' - works if you're before the scope, but not after
da" - delete from current " to next, including the "

mike is "super not cool" and such
mike (vacha) is bad at neovim

ce - delete remainder of word and go into insert mode (cw seems to behave exactly the same)
caw - delete entire word and go into insert mode (note that cae does not do anything)
cc - delete line and go into insert mode
c$ - delete to end of line and go into insert mode
note: c commands also work with numbers for repeating actions
note note: I used to not be sure why you'd use c instead of d - it puts you into insert mode, but I don't know whether there are other differences

visual mode:
v - enter visual mode, where you can select text
V - enter visual mode and select entire row (useful for selecting multiple rows)
: - after selecting text, enter command(?) mode, and then do something like w filename to write selected text to a file
i" or i' - select to closing " or ', without including the " or '
a" or a' - same as above, but include " or '

misc:
u - undo last command
U - (caps U) undo all changes on a line (does not seem to work if changes were made on another line)
CTRL+R - redo command
p - put copied text here 
	p puts it below the cursor
	P puts it above the cursor
"[letter]p - put from lettered register
rx - replace character under cursor with x (or whatever character)
R - enter insert mode and replace characters as you type
o - insert a blank line below the current line and go into insert mode
O - same as above, but go above current line
CTRL+D - while in normal mode, if :letter has been typed, will show commands that start with that letter
> or < - increase or decrease indent while in visual mode

:w filename - write file to new file named filename
:r filename - read contents of a file and place them at the cursor
:r command - execute a terminal command and place them at the cursor

y - yank mode (need to combine with other actions)
yl - yank single letter
y$ - copy from cursor to end of line
y^ - copy from cursor to beginning of line
ye - copy from cursor to end of word without trailing space
yw - copy from cursor to end of word with trailing space
yaw - copy whole word
yy - copy whole line
"[letter]y - yank line to lettered register (using capial letter appends text to end of register)
yi' and yi" - same as delete, but yanks
ya' and ya" - same as above, but include ' or "

"*yy - yanks to external clipboard
"*p - puts from external clipboard

movement:
w - forward one word, to beginning of each word
e - forward one word, to end of each word
b - backward one word
$ - end of line
^ - go to first non-space character in line
0 - go to beginning of line
% - go to matching (, {, or [
CTRL+g - show current location 
G - go to bottom of file
gg - go to top
a number + G - go to that line in the file
a number + ENTER - go that many lines forward
+ - move down a line to first non-space character
- - move up a line to first non-space character
) - move forward one sentence
( - move backward one sentence
:ju - show jump list (for use with CTRL+O and CTRL+I and other things I don't understand yet)
[m or ]m - go to previous/next start of method
[M or ]M - to to previous/next end of method
* - next instance of current word


searching:
/ - search for something
n - find next instance after finding something
N - find previous instance
? - search backwards (n and N are reversed from above when using ?)
CTRL+o - naviate to previous cursor positions (probably not solely after having searched)
CTRL+i - navigate forward in cursor positions
\c - at end of search, ignores case
:noh - clear highlighting from last search

:s - substitute first instance of a word with another - :s/whatever/hey would substitute 'hey' for 'whatever' (but only for the current line)
  - appending /g to end makes the command global for that line
:%s/old/new/g - change every occurence in the file
:%s/old/new/gc - change every occurence with a prompt
	prompts for above search:
	y - yes for selected instance
	n - no for selected instance
	a - replace all remaining
	q - quit replace prompting (replacements are kept)
	l - perform current substitution and quit (last?)
	CTRL+E - move down the page (works outside of search context)
	CTRL+Y - move up the page (works outside of search)

:set - set options, such as whether to ignore case when searching
:set inv[option] - set the inverse of the option
:set no[option] - turn option off

window splitting:
:edit filename - open file in a new buffer
CTRL+ww - switch between windows
:vsplit file - open file in a vertical split, file will be on the left
:bnext - next buffer (has to be a better way to do this)
CTRL+^ - switch to another buffer - buffer to switch to is indicated with a # when you use :buffers
:bd - close the current buffer
:b [TAB] - switch between buffers
:buffers - list open buffers

a line with whatever in it

ok, that works
why would I ever want to do that?
blah
another line with whatever in it
this is a line for testing deleting multiple words using c
this line has two repeating words at the end, and those words are whatever whatever and then there's more stuff


testing some yanking/putting stuff

This is a sentence. This is another sentence. This is the third sentence. I still don't type as quickly on this keyboard as I did on my normal keyboard back in the day. 

this is another line

this is a sentence that "has some text in quotes" in it
this is a sentence (without capitalization or punctuation) that has some parentheses in it
should I do something more complex, such as "a sentence 'with inner quotes' or whatever" to see how that works?

blah


